GeoAIDA Pitfalls

* If you mess with image formats, e.g. introduce a new one, grep for FORMAT to get a list of relevant places. If you write code that is affected by the introduction of new file formats, please add a FORMAT comment.

* While the cache system/split file are up and running, neither have been really tested with HUGE files (>4GB). The Windows port is known NOT to work with such files at the moment (TODO!). The Unix part of gacachefile.cpp should work just fine on a system where lseek accepts 64bit values (e.g. 64-bit Darwin). If anything goes wrong with large files, there could be oversights here, i.e. temporary calculations still being done with ints, i.e. someFunction(sizeX*sizeY) where the variables are still ints. Correct: LargeSize(sizeX) * LargeSize(sizeY).

* x, y, sizeX, sizeY are always stored as int values (only pixel indices are stored as long long/LargeSize). This means that while an Image *could* have an area of up to 2^64 pixels, its width and height are limited to 2^31-1 at the moment. I doubt that this will become a problem anytime soon, but it should be noted, and could be changed if someone has too much time on his hands :)



GeoAIDA Critical To Do

* Documentation: As long as there're still undocumented classes in the Doxygen class tree, this To Do item is an important one :)

* Integrate branches/raschke with the parts outside of ga_image, i.e. gad and gda. Some parts of them have already been superficially updated for the new Image interface, but most haven't.

* A lot of work has gone into moving algorithms OUT of Ga::Image, which had grown unmanageably large. Anything that doesn't *HAVE* to be a member of Ga::Image should really be a function declaration in gaalgo.h, and an implementation in gaALGONAME.cpp, i.e. canny() in gacanny.cpp. Some algorithms have been left in gaalgo.h which have been removed from Ga::Image, but not yet moved into global functions due to lack of knowledge how they work. It would be very wise to handle the first point of the list below before this one.

* Except Canny and Gaussian Blur, no algorithm has been tested a lot. They should be fixed and a reference image/unit test should be created by someone who understands their intentions. This is the only way to guarantee that they will remain working over time.

* Windows port: Most of the algorithms used variable-length arrays on the stack, a GCC extension not supported by Visual C++, so the Windows port doesn't work at all.



GeoAIDA Non-Critical Improvements

* There is a lot of ugly, repetive boilerplate code inside algorithms which use ImageT, not the Image facade. If someone wants to flex his wizardly C++ muscles, this should be shortened to the absolute minimum and then reapplied to all algorithms to short them down A LOT. The Canny algorithm for example would massively benefit from working on ImageT in all stages.

* All tabs should be transformed into two spaces, some files still contain them.

* Most source files have an extensive header that contains a date and author, and lots of other stuff. Most of them are outdated. Do we really need such headers at all? Wouldn't an author (with email) suffice?

* The ga_image/src/gaimage folder is pretty messy and should be split up into cache, image and algorithms.

* Maybe a less offensive image should be used for unit tests ;)

* pImage() is a weird name, would ImageT() be clearer?

* channels and noChannels are both heavily used, both in variable as well as in function names. Should be unified.

* Iterator range optimizations: ImageT iterators carry an allowed range and a relocation functor with them. Once they leave their range, they call the relocation function that will tell them if they need to point to a different image segment. This range usually spans from the left border to the right border of a segment.
However, if the image is only one segment wide, the range could be extended so that the iterator silently (and in this case, safely) wraps around the borders, avoiding lots of relocations. If one segment-wide images become unexpectingly common, this should be considered.

* Geo data parser/writer for comments. At the moment, there is no way to read or store geopositions. The old way of reading and writing them via libpfm has been broken by both the new ImageIO design and a libpfm bug with regard to comment reading/writing. If a file format is introduced that allows for geopositions to be stored with the image, the getComment/setComment system should be changed to getGeoData/setGeoData.
